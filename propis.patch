diff --git a/src/grammar.pegjs b/src/grammar.pegjs
index 0d1086c..8351170 100644
--- a/src/grammar.pegjs
+++ b/src/grammar.pegjs
@@ -3,25 +3,25 @@ var CS = require("./nodes"),
 
   constructorLookup =
     { '||': CS.LogicalOrOp
-    , or: CS.LogicalOrOp
     , '&&': CS.LogicalAndOp
-    , and: CS.LogicalAndOp
+    , 'и': CS.LogicalAndOp
+    , 'или': CS.LogicalOrOp
     , '|': CS.BitOrOp
     , '^': CS.BitXorOp
     , '&': CS.BitAndOp
     , '?': CS.ExistsOp
     , '==': CS.EQOp
-    , is: CS.EQOp
+    , 'это': CS.EQOp
     , '!=': CS.NEQOp
-    , isnt: CS.NEQOp
+    , 'этоне': CS.NEQOp
     , '<=': CS.LTEOp
     , '>=': CS.GTEOp
     , '<': CS.LTOp
     , '>': CS.GTOp
-    , 'extends': CS.ExtendsOp
-    , 'instanceof': CS.InstanceofOp
-    , 'in': CS.InOp
-    , 'of': CS.OfOp
+    , 'наследует': CS.ExtendsOp
+    , 'экземпляр': CS.InstanceofOp
+    , 'в': CS.InOp
+    , 'из': CS.OfOp
     , '<<': CS.LeftShiftOp
     , '>>': CS.SignedRightShiftOp
     , '>>>': CS.UnsignedRightShiftOp
@@ -33,19 +33,19 @@ var CS = require("./nodes"),
     , '**': CS.ExpOp
     },
 
-  negatableOps = ['instanceof', 'in', 'of'],
-  chainableComparisonOps = ['<=', '>=', '<', '>', '==', 'is', '!=', 'isnt'],
+  negatableOps = ['экземпляр', 'в', 'из'],
+  chainableComparisonOps = ['<=', '>=', '<', '>', '==', 'это', '!=', 'этоне'],
 
   rightAssocOps = [';', '=', '?', '**'],
   precedenceHierarchy =
-    [ ['or', '||']
-    , ['and', '&&']
+    [ ['или', '||']
+    , ['и', '&&']
     , ['|']
     , ['^']
     , ['&']
     , ['?']
-    , ['is', '==', 'isnt', '!=']
-    , ['instanceof', 'in', 'of', '<=', '>=', '<', '>']
+    , ['это', '==', 'этоне', '!=']
+    , ['экземпляр', 'в', 'из', '<=', '>=', '<', '>']
     , ['<<', '>>', '>>>']
     , ['+', '-']
     , ['*', '/', '%']
@@ -98,9 +98,9 @@ var CS = require("./nodes"),
     , '+': CS.UnaryPlusOp
     , '-': CS.UnaryNegateOp
     , '!': CS.LogicalNotOp
-    , 'not': CS.LogicalNotOp
+    , 'не': CS.LogicalNotOp
     , '~': CS.BitNotOp
-    , 'do': CS.DoOp
+    , 'выполнить': CS.DoOp
     , 'typeof': CS.TypeofOp
     , 'delete': CS.DeleteOp
     },
@@ -360,15 +360,15 @@ postfixControlFlowExpression
             postfix = postfixContainer[1],
             indicator = postfix.type;
         switch(indicator){
-          case 'if':
-          case 'unless':
-            constructor = ('unless' === indicator) ? CS.NegatedConditional : CS.Conditional;
-            cond = ('unless' === indicator) ? new CS.LogicalNotOp(postfix.cond).g() : postfix.cond;
+          case 'если':
+          case 'еслине':
+            constructor = ('еслине' === indicator) ? CS.NegatedConditional : CS.Conditional;
+            cond = ('еслине' === indicator) ? new CS.LogicalNotOp(postfix.cond).g() : postfix.cond;
             return rp(new constructor(cond, expr, null));
-          case 'while':
-          case 'until':
-            constructor = ('unless' === indicator) ? CS.NegatedWhile : CS.While;
-            cond = ('unless' === indicator) ? new CS.LogicalNotOp(postfix.cond).g() : postfix.cond;
+          case 'пока':
+          case 'покане':
+            constructor = ('еслине' === indicator) ? CS.NegatedWhile : CS.While;
+            cond = ('еслине' === indicator) ? new CS.LogicalNotOp(postfix.cond).g() : postfix.cond;
             return rp(new constructor(cond, expr));
           case 'for-in':
             return rp(new CS.ForIn(postfix.val, postfix.key, postfix.list, postfix.step, postfix.filter, expr));
@@ -658,8 +658,8 @@ spreadNoImplicitObjectCall
 
 conditional
   = kw:(IF / UNLESS) _ cond:assignmentExpressionNoImplicitObjectCall body:conditionalBody elseClause:elseClause? {
-      var constructor = 'unless' === kw ? CS.NegatedConditional : CS.Conditional;
-      if('unless' === kw) cond = new CS.LogicalNotOp(cond).g();
+      var constructor = 'еслине' === kw ? CS.NegatedConditional : CS.Conditional;
+      if('еслине' === kw) cond = new CS.LogicalNotOp(cond).g();
       return rp(new constructor(cond, body.block, elseClause || null));
     }
   conditionalBody
@@ -672,8 +672,8 @@ conditional
 
 while
   = kw:(WHILE / UNTIL) _ cond:assignmentExpressionNoImplicitObjectCall body:whileBody {
-      var constructor = 'until' === kw ? CS.NegatedWhile : CS.While;
-      if('until' === kw) cond = new CS.LogicalNotOp(cond).g();
+      var constructor = 'покане' === kw ? CS.NegatedWhile : CS.While;
+      if('покане' === kw) cond = new CS.LogicalNotOp(cond).g();
       return rp(new constructor(cond, body.block));
     }
   whileBody = conditionalBody
@@ -773,16 +773,16 @@ forIn
 
 switch
   = SWITCH _ e:(expressionworthy / assignmentExpression)? body:switchBody {
-      return rp(new CS.Switch(e || null, body.cases, body['else'] || null));
+      return rp(new CS.Switch(e || null, body.cases, body['иначе'] || null));
     }
   switchBody
-    = _ TERMINDENT b:switchBlock DEDENT { return r({cases: b.cases, 'else': b['else']}); }
+    = _ TERMINDENT b:switchBlock DEDENT { return r({cases: b.cases, 'иначе': b['иначе']}); }
     / _ THEN _ c:case { return r({cases: [c]}); }
     / _ THEN { return r({cases: []}); }
   switchBlock
     = c:case cs:(_ TERMINATOR _ case)* elseClause:(_ TERMINATOR _ elseClause)? TERMINATOR? {
         var cases = [c].concat(cs.map(function(w){ return w[3]; }));
-        return r({cases: cases, 'else': elseClause ? elseClause[3] : null});
+        return r({cases: cases, 'иначе': elseClause ? elseClause[3] : null});
       }
   case
     = WHEN _ conditions:caseConditions body:caseBody {
@@ -1116,55 +1116,55 @@ TERMINDENT = $(TERMINATOR INDENT)
 
 
 // keywords
-AND = $("and" !identifierPart)
-BREAK = $("break" !identifierPart)
-BY = $("by" !identifierPart)
-CATCH = $("catch" !identifierPart)
-CONTINUE = $("continue" !identifierPart)
-CLASS = $("class" !identifierPart)
+AND = $("и" !identifierPart)
+BREAK = $("прервать" !identifierPart)
+BY = $("шаг" !identifierPart)
+CATCH = $("перехват" !identifierPart)
+CONTINUE = $("продолжить" !identifierPart)
+CLASS = $("класс" !identifierPart)
 DELETE = $("delete" !identifierPart)
 DEBUGGER = $("debugger" !identifierPart)
-DO = $("do" !identifierPart)
-ELSE = $("else" !identifierPart)
-EXTENDS = $("extends" !identifierPart)
-FALSE = $("false" !identifierPart)
-FINALLY = $("finally" !identifierPart)
-FOR = $("for" !identifierPart)
-IF = $("if" !identifierPart)
-IN = $("in" !identifierPart)
-INSTANCEOF = $("instanceof" !identifierPart)
-IS = $("is" !identifierPart)
-ISNT = $("isnt" !identifierPart)
-LOOP = $("loop" !identifierPart)
-NEW = $("new" !identifierPart)
-NO = $("no" !identifierPart)
-NOT = $("not" !identifierPart)
-NULL = $("null" !identifierPart)
-OF = $("of" !identifierPart)
-OFF = $("off" !identifierPart)
-ON = $("on" !identifierPart)
-OR = $("or" !identifierPart)
-OWN = $("own" !identifierPart)
-RETURN = $("return" !identifierPart)
-SWITCH = $("switch" !identifierPart)
-THEN = $("then" !identifierPart)
-THIS = $("this" !identifierPart)
-THROW = $("throw" !identifierPart)
-TRUE = $("true" !identifierPart)
-TRY = $("try" !identifierPart)
+DO = $("выполнить" !identifierPart)
+ELSE = $("иначе" !identifierPart)
+EXTENDS = $("наследует" !identifierPart)
+FALSE = $("ложь" !identifierPart)
+FINALLY = $("завершение" !identifierPart)
+FOR = $("для" !identifierPart)
+IF = $("если" !identifierPart)
+IN = $("в" !identifierPart)
+INSTANCEOF = $("экземпляр" !identifierPart)
+IS = $("это" !identifierPart)
+ISNT = $("этоне" !identifierPart)
+LOOP = $("цикл" !identifierPart)
+NEW = $("новый" !identifierPart)
+NO = $("нет" !identifierPart)
+NOT = $("не" !identifierPart)
+NULL = $("нуль" !identifierPart)
+OF = $("из" !identifierPart)
+OFF = $("выкл" !identifierPart)
+ON = $("вкл" !identifierPart)
+OR = $("или" !identifierPart)
+OWN = $("свой" !identifierPart)
+RETURN = $("возврат" !identifierPart)
+SWITCH = $("выбор" !identifierPart)
+THEN = $("то" !identifierPart)
+THIS = $("этот" !identifierPart)
+THROW = $("выдать" !identifierPart)
+TRUE = $("истина" !identifierPart)
+TRY = $("проба" !identifierPart)
 TYPEOF = $("typeof" !identifierPart)
-UNDEFINED = $("undefined" !identifierPart)
-UNLESS = $("unless" !identifierPart)
-UNTIL = $("until" !identifierPart)
-WHEN = $("when" !identifierPart)
-WHILE = $("while" !identifierPart)
-YES = $("yes" !identifierPart)
+UNDEFINED = $("неизвестно" !identifierPart)
+UNLESS = $("еслине" !identifierPart)
+UNTIL = $("покане" !identifierPart)
+WHEN = $("когда" !identifierPart)
+WHILE = $("пока" !identifierPart)
+YES = $("да" !identifierPart)
 
 SharedKeywords
-  = ("true" / "false" / "null" / "this" / "new" / "delete" / "typeof" /
-  "instanceof" / "in" / "return" / "throw" / "break" / "continue" / "debugger" /
-  "if" / "else" / "switch" / "for" / "while" / "do" / "try" / "catch" /
-  "finally" / "class" / "extends" / "super") !identifierPart
+  = ("истина" / "ложь" / "нуль" / "этот" / "новый" / "delete" / "typeof" /
+  "экземпляр" / "возврат" / "выдать" / "прервать" / "продолжить" / "debugger" /
+  "если" /"иначе" / "выбор" / "для" / "пока" / "выполнить" / "проба" / "перехват" /
+  "завершение" / "класс" / "наследует" / "super" / "в") !identifierPart
 
 JSKeywords
   = ("case" / "default" / "function" / "var" / "void" / "with" / "const" /
@@ -1172,8 +1172,8 @@ JSKeywords
   "package" / "private" / "protected" / "public" / "static" / "yield") !identifierPart
 
 CSKeywords
-  = ("undefined" / "then" / "unless" / "until" / "loop" / "off" / "by" / "when" /
-  "and" / "or" / "isnt" / "is" / "not" / "yes" / "no" / "on" / "of") !identifierPart
+  = ("неизвестно" / "еслине" / "покане" / "цикл" / "выкл" / "шаг" / "когда" /
+  "или" / "этоне" / "это" / "нет" / "да" / "не" / "вкл" / "из" / "то" / "и") !identifierPart
 
 StandardPredefinedMacros
   = "__" ("FILENAME" / "LINE" / "DATETIMEMS" / "DATE" / "TIME") "__"
